services:
  ###########################################################################
  # postgres database
  ###########################################################################
  postgres:
    image: postgres:17
    hostname: postgres
    container_name: postgres
    restart: unless-stopped
    command: >
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      -c wal_level=logical
      -c max_wal_senders=1
      -c max_replication_slots=1
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - pg_data:/var/lib/postgresql/data
#      - ./config/postgres/initdb.d/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q']
      interval: 60s
      start_period: 1m
      start_interval: 10s
      timeout: 15s
      retries: 5
  ###########################################################################
  # minio
  # create the `warehouse` bucket
  # with "public" policy at: http://localhost:9001/buckets
  # or: mc mb local/warehouse
  ###########################################################################
  minio:
    image: bitnami/minio:2025.4.22
    hostname: minio
    container_name: minio
    restart: unless-stopped
    profiles: [optional]
    volumes:
      - minio:/bitnami/minio/data
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-bufstream:public,warehouse:public}
      # MINIO_DOMAIN: minio
      MINIO_SKIP_CLIENT: "yes"
      MINIO_PROMETHEUS_AUTH_TYPE: public
    ports:
      - '9000:9000'
      - '9001:9001'
    healthcheck:
      test: ['CMD', 'mc', 'ready', 'local']
      interval: 60s
      start_period: 1m
      start_interval: 10s
      timeout: 15s
      retries: 5
  ###########################################################################
  # kafka broker + schema registry
  # Open:
  # https://redpanda.localhost.direct/
  ###########################################################################
  redpanda:
    image: redpandadata/redpanda:v24.3.9
    hostname: redpanda
    container_name: redpanda
    restart: unless-stopped
    expose:
      - 8081
      - 8082
      - 9644
      - 9092
      - 19092
    ports:
      - "8081:8081"
      - "8082:8082"
      - "19092:19092"
      - "9644:9644"
    volumes:
      - redpanda:/var/lib/redpanda/data
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp
      - "1"
      - --memory
      - "1G"
      - --reserve-memory
      - "0M"
      - --node-id
      - "0"
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers' from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers' from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      # - --advertise-pandaproxy-addr redpanda:8082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:8082
      - --schema-registry-addr internal://redpanda:8081,external://localhost:8081
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      - --check=false
      - --set redpanda.enable_transactions=true
      - --set redpanda.enable_idempotence=true
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
  ###########################################################################
  # Redpanda Console
  # http://localhost:8080/admin/health
  # http://localhost:8080/admin/startup
  # http://localhost:8080/admin/metrics
  # Docs: https://github.com/redpanda-data/console/blob/master/docs/features/protobuf.md
  ###########################################################################
  console:
    image: redpandadata/console:v3.1.0
    hostname: console
    container_name: console
    environment:
      KAFKA_BROKERS: 'redpanda:9092'
      KAFKA_CLIENTID: 'rpconsole;broker_count=1;host_override=redpanda'
      SCHEMAREGISTRY_ENABLED: 'true'
      SCHEMAREGISTRY_URLS: http://redpanda:8081
      #KAFKACONNECT_ENABLED: true
      #KAFKACONNECT_CLUSTERS_NAME: Connectors
      #KAFKACONNECT_CLUSTERS_URLS: http://connect:8083
      REDPANDA_ADMINAPI_ENABLED: 'true'
      REDPANDA_ADMINAPI_URLS: http://redpanda:9644
    ports:
      - '8080:8080'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/admin/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      redpanda:
        condition: service_healthy
  ###########################################################################
  # Redpanda connect (Benthos)
  # HealthChecks: https://docs.redpanda.com/redpanda-connect/guides/monitoring/
  ###########################################################################
  connect:
    hostname: connect
    container_name: connect
    profiles: [optional]
    image: redpandadata/connect:4
    environment:
        KAFKA_SEED_BROKERS: redpanda:9092
    volumes:
      - ./pipelines/bitmex.connect.yaml:/connect.yaml
      # - /Users/aervits/.ssh/rsa_key.pem:/rsa_key.pem
    ports:
      - 4195:4195
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4195/ready" ]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      redpanda:
        condition: service_healthy
      console:
        condition: service_healthy
  ###########################################################################
  # clickhouse
  ###########################################################################
  clickhouse:
    image: clickhouse/clickhouse-server:25.3-alpine
    hostname: clickhouse
    container_name: clickhouse
    profiles: [optional]
    ports:
      - 8123:8123
      - 9010:9000
      - 9009:9009
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--tries=3", "--spider", "-q", "localhost:8123/ping"]
      interval: 5s
      timeout: 3s
    volumes:
      - clickhouse:/var/lib/clickhouse
  ###########################################################################
  # arroyo service
  ###########################################################################
  arroyo:
    image: ghcr.io/arroyosystems/arroyo:latest
    # image: ghcr.io/arroyosystems/arroyo-single:latest
    hostname: arroyo
    container_name: arroyo
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_NAME=postgres
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - '5115:5115'
    entrypoint: >
      bash -c "/app/arroyo migrate && /app/arroyo cluster"
    volumes:
      - ./config/arroyo.toml:/app/arroyo.toml:ro
      - ./data/arroyo/data:/home/data
    depends_on:
      postgres:
        condition: service_healthy
      # minio:
      #   condition: service_healthy
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'localhost:5114/status']
      interval: 10s
      start_period: 5s
      timeout: 10s
      retries: 5
  ###########################################################################
  # SQLFlow service
  ###########################################################################
  sqlflow:
    image: turbolytics/sql-flow:latest
    platform: 'linux/amd64'
    hostname: sqlflow
    container_name: sqlflow
    profiles: [optional]
    volumes:
      - sqlflow:/tmp/sqlflow
      - ./config:/tmp/config
    environment:
      SQLFLOW_KAFKA_BROKERS: redpanda:9092
    command: [
      "run", "/tmp/config/sqlflow.basic.agg.mem.yml",
      "--max-msgs-to-process", "100"
    ]
    depends_on:
      redpanda:
        condition: service_healthy
      console:
        condition: service_healthy
  ###########################################################################
  # redis-stack
  ###########################################################################
  redis:
    image: redis/redis-stack:latest
    hostname: redis
    container_name: redis
    profiles: [optional]
    environment:
      # make a test user and database
#      - REDIS_PASSWORD=redis
      # redis rdb backup config.
      # Save if 100 keys are added in every 10 seconds: --save 10 100
      - "REDIS_ARGS=--appendonly yes"
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      start_period: 5s
      timeout: 3s
      retries: 5
###########################################################################
# volumes
###########################################################################
volumes:
  pg_data: {}
  minio: {}
  clickhouse: {}
  redpanda: {}
  sqlflow: {}
  redis_data: {}